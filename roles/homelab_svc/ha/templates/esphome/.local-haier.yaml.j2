esphome:
  name: ${device_name}
  friendly_name: ${friendly_name}
  platformio_options:
    board_build.flash_mode: dio

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: ${device_name}
    password: !secret wifi_hotspot_password

captive_portal:

ota:
  platform: esphome

web_server:
  port: 80

logger:
  baud_rate: 0

uart:
  id: haier_uart
  baud_rate: 9600
  tx_pin: 18
  rx_pin: 19

climate:
  - platform: haier
    id: haier_ac
    protocol: hon
    name: ${friendly_name}
    uart_id: haier_uart
    answer_timeout: 300ms
    wifi_signal: true
    visual:
      min_temperature: 16 °C
      max_temperature: 30 °C
      temperature_step: 1 °C
    supported_modes:
      - 'OFF'
      - HEAT_COOL
      - COOL
      - HEAT
      - DRY
      - FAN_ONLY
    supported_swing_modes:
      - 'OFF'
      - VERTICAL
      - HORIZONTAL
      - BOTH
    supported_presets:
      - BOOST
      - AWAY
      - SLEEP
    on_alarm_start:
      then:
        - logger.log:
            level: WARN
            format: "Alarm activated. Code: %d. Message: \"%s\""
            args: [ 'code', 'message' ]
        - homeassistant.service:
            service: logbook.log
            data:
              domain: climate
              name: ${device_name}
            data_template:
              message: "{% raw %}Alarm activated ({{ alarm_code }}): {{alarm_message}}{% endraw %}"
            variables:
              alarm_message: !lambda "return message;"
              alarm_code: !lambda "return code;"
        - homeassistant.service:
            service: notify.persistent_notification
            data:
              title: "${device_name}: alarm activated"
            data_template:
              message: "{% raw %}Code: {{ alarm_code }}, message: \"{{ alarm_message }}\"{% endraw %}"
            variables:
              alarm_message: !lambda "return message;"
              alarm_code: !lambda "return code;"
    on_alarm_end:
      then:
        - logger.log:
            level: INFO
            format: "Alarm deactivated. Code: %d. Message: \"%s\""
            args: [ 'code', 'message' ]
        - homeassistant.service:
            service: logbook.log
            data:
              domain: climate
              name: ${device_name}
            data_template:
              message: "{% raw %}Alarm deactivated ({{ alarm_code }}): {{alarm_message}}{% endraw %}"
            variables:
              alarm_message: !lambda "return message;"
              alarm_code: !lambda "return code;"
    on_status_message:
      then:
        - logger.log:
            level: INFO
            format: "New status message received, size=%d, subcmd=%02X%02X"
            args: [ 'data_size', 'data[0]', 'data[1]' ]

switch:
  - platform: haier
    beeper:
      name: ${friendly_name} beeper
    health_mode:
      name: ${friendly_name} health mode
    display:
      name: ${friendly_name} display
    quiet_mode:
      name: ${friendly_name} quiet mode

sensor:
  - platform: haier
    haier_id: haier_ac
    power:
      name: ${friendly_name} Power
    compressor_current:
      name: ${friendly_name} Compressor Current
    compressor_frequency:
      name: ${friendly_name} Compressor Frequency
    expansion_valve_open_degree:
      name: ${friendly_name} Expansion Valve Open Degree
    indoor_coil_temperature:
      name: ${friendly_name} Indoor Coil Temperature
    outdoor_coil_temperature:
      name: ${friendly_name} Outdoor Coil Temperature
    outdoor_defrost_temperature:
      name: ${friendly_name} Outdoor Defrost Temperature
    outdoor_in_air_temperature:
      name: ${friendly_name} Outdoor In Air Temperature
    outdoor_out_air_temperature:
      name: ${friendly_name} Outdoor Out Air Temperature
    outdoor_temperature:
      name: ${friendly_name} Outdoor Temperature

binary_sensor:
  - platform: haier
    haier_id: haier_ac
    defrost_status:
      name: ${friendly_name} Defrost Status
    four_way_valve_status:
      name: ${friendly_name} Four Way Valve Status
    indoor_electric_heating_status:
      name: ${friendly_name} Indoor Electric Heating Status
    indoor_fan_status:
      name: ${friendly_name} Indoor Fan Status
    outdoor_fan_status:
      name: ${friendly_name} Outdoor Fan Status
    compressor_status:
      name: ${friendly_name} Outdoor Compressor Status

api:
  services:
    - service: turn_on
      then:
        - climate.haier.power_on: haier_ac
    - service: turn_off
      then:
        - climate.haier.power_off: haier_ac
