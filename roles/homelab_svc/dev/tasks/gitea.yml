---
- name: gitea - ssh passthrough - create group
  ansible.builtin.group:
    name: "{{ gitea_ssh_user }}"
    gid: "{{ pgid }}"
  tags: gitea

- name: gitea - ssh passthrough - create user
  ansible.builtin.user:
    name: "{{ gitea_ssh_user }}"
    uid: "{{ puid }}"
    group: "{{ gitea_ssh_user }}"
    generate_ssh_key: true
    password: ""
    update_password: on_create
  no_log: true
  tags: gitea

- name: gitea - ssh passthrough - get pub key of created user
  ansible.builtin.command: >
    cat /home/{{ gitea_ssh_user }}/.ssh/id_rsa.pub
  register: git_key
  changed_when: false
  tags: gitea

- name: gitea - ssh passthrough - add pub key to authorized_keys
  ansible.builtin.lineinfile:
    path: /home/{{ gitea_ssh_user }}/.ssh/authorized_keys
    line: no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty {{ git_key.stdout }}
    owner: "{{ gitea_ssh_user }}"
    group: "{{ gitea_ssh_user }}"
    mode: 0600
    create: true
    state: present
  tags: gitea

- name: gitea - ssh passthrough - copy files (fake host gitea command)
  ansible.builtin.copy:
    src: files/gitea
    dest: /usr/local/bin/gitea
    mode: 0755
  tags: gitea

- name: gitea - create dir
  ansible.builtin.file:
    path: "{{ gitea_app_data_path_host }}/conf"
    state: directory
    recurse: true
  tags: gitea

- name: gitea - copy files
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ puid }}"
    group: "{{ pgid }}"
    mode: 0600
  loop:
    - { src: app.ini.j2, dest: "{{ gitea_app_data_path_host }}/conf/app.ini" }
  notify: gitea - restart
  tags: gitea

- name: gitea-db - start
  community.docker.docker_container:
    name: gitea-db
    image: "{{ gitea_db_image }}"
    image_name_mismatch: recreate
    pull: true
    env:
      POSTGRES_USER: "{{ gitea_db_user }}"
      POSTGRES_PASSWORD: "{{ gitea_db_pass }}"
      POSTGRES_DB: "{{ gitea_db_user }}"
    volumes:
      - "{{ dev_app_path }}/gitea/db:/var/lib/postgresql/data"
    networks:
      - name: "{{ app_network_name }}"
    networks_cli_compatible: true
    restart_policy: unless-stopped
    state: started
  no_log: true
  tags: gitea

- name: gitea - start
  community.docker.docker_container:
    name: gitea
    image: "{{ gitea_image }}"
    image_name_mismatch: recreate
    pull: true
    ports:
      - "3000:3000"
      - "127.0.0.1:2222:22"
    env:
      USER_UID: "{{ puid }}"
      USER_GID: "{{ pgid }}"
      GNUPGHOME: "{{ gitea_home_path }}/.gnupg"
    volumes:
      - "/etc/timezone:/etc/timezone:ro"
      - "/etc/localtime:/etc/localtime:ro"
      - "/home/{{ gitea_ssh_user }}/.ssh/:/data/git/.ssh"
      - "{{ dev_app_path }}/gitea/data:/data"
    networks:
      - name: "{{ app_network_name }}"
    networks_cli_compatible: true
    labels:
      traefik.enable: "true"
      traefik.http.routers.gitea.rule: "HostRegexp(`git{fqdn:(.{{ inventory__homelab_domain }})?}`)"
      traefik.http.services.gitea.loadbalancer.server.port: "3000"
      traefik.http.routers.gitea.entrypoints: "websecure"
      traefik.http.routers.gitea.tls: "true"
    restart_policy: unless-stopped
    state: started
  register: gitea_start
  no_log: true
  tags: gitea

- name: gitea - add auth source (ldap)
  ansible.builtin.command: >
    docker exec -u git gitea sh -c \
      'gitea admin auth add-ldap \
        --name freeipa \
        --security-protocol starttls \
        --host {{ inventory__ldap_domain }} \
        --port {{ inventory__ldap_port }} \
        --skip-tls-verify \
        --bind-dn "{{ gitea_ldap_bind_dn }}" \
        --bind-password "{{ gitea_ldap_bind_pw }}" \
        --user-search-base "{{ inventory__ldap_users_dn }}" \
        --user-filter "{{ gitea_ldap_user_filter }}" \
        --admin-filter "{{ gitea_ldap_admin_filter }}" \
        --username-attribute uid \
        --firstname-attribute givenname \
        --surname-attribute sn \
        --email-attribute mail \
        --public-ssh-key-attribute ipaSshPubKey \
        --synchronize-users'
  register: _auth_source_ldap_result
  retries: 12
  delay: 5
  until: _auth_source_ldap_result is not failed
  changed_when: _auth_source_ldap_result.rc == 0
  failed_when: >
    _auth_source_ldap_result.rc >= 1 and
    "login source already exists" not in _auth_source_ldap_result.stderr
  no_log: true
  tags: gitea

- name: gitea - gpg - check if key already exists
  ansible.builtin.command: >
    docker exec -u git gitea sh -c \
      'gpg --list-secret-keys | grep "gitea"'
  register: gpg_key
  changed_when: false
  failed_when: gpg_key.rc == 2
  tags: gitea

- name: gitea - gpg
  when: gpg_key is defined and not gpg_key.stdout
  block:
    - name: gitea - gpg - copy key template
      ansible.builtin.copy:
        src: files/gen-key-script
        dest: "{{ gitea_home_path_host }}/.gnupg/gen-key-script"
        owner: "{{ gitea_ssh_user }}"
        group: "{{ gitea_ssh_user }}"
        mode: 0600
      tags: gitea

    - name: gitea - gpg - generate key
      ansible.builtin.command: >
        docker exec -u git gitea sh -c \
          'gpg --batch --gen-key {{ gitea_home_path }}/.gnupg/gen-key-script'
      args:
        creates: "{{ gitea_home_path_host }}/.gnupg/private-keys-v1.d"
      tags: gitea

    - name: gitea - gpg - delete key template
      ansible.builtin.file:
        path: "{{ gitea_home_path_host }}/.gnupg/gen-key-script"
        state: absent
      tags: gitea

    - name: gitea - gpg - get key id
      ansible.builtin.command: >
        docker exec -u git gitea sh -c \
          'gpg -k --keyid-format SHORT | grep "pub" | awk "{printf \$2}" | awk -F/ "{printf \$2}"'
      register: gpg_key_id
      changed_when: false
      tags: gitea

    - name: gitea - gpg - configure git signing
      ansible.builtin.command: >
        docker exec -u git gitea sh -c \
          '{{ item }}'
      loop:
        - git config --file {{ gitea_home_path }}/.gitconfig user.signingkey {{ gpg_key_id.stdout }}
        - git config --file {{ gitea_home_path }}/.gitconfig commit.gpgsign true
      changed_when: true
      notify: gitea - restart
      tags: gitea
