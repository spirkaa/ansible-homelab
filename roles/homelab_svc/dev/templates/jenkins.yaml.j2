jenkins:
  numExecutors: 0
  scmCheckoutRetryCount: 3
  authorizationStrategy:
    loggedInUsersCanDoAnything:
      allowAnonymousRead: false
  securityRealm:
    ldap:
      configurations:
      - server: "{{ inventory__ldap_domain }}"
        rootDN: "{{ inventory__ldap_base_dn }}"
        managerDN: "{{ jenkins_ldap_bind_dn }}"
        managerPasswordSecret: "{{ jenkins_ldap_bind_pw }}"
        userSearch: "{{ jenkins_ldap_user_search }}"
        inhibitInferRootDN: false
      disableMailAddressResolver: false
      disableRolePrefixing: true
      groupIdStrategy: "caseInsensitive"
      userIdStrategy: "caseInsensitive"
  clouds:
  - docker:
      name: "docker-local"
      containerCap: 1
      dockerApi:
        dockerHost:
          uri: "unix:///var/run/docker.sock"
      templates:
      - connector: "attach"
        dockerTemplateBase:
          image: "git.devmem.ru/projects/jenkins-agent:latest"
          pullCredentialsId: "gitea-user"
          user: "root"
          mounts:
          - "type=bind,source=/usr/bin/docker,destination=/usr/bin/docker"
          - "type=bind,source=/var/run/docker.sock,destination=/var/run/docker.sock"
        instanceCapStr: "1"
        labelString: "worker"
        name: "worker"
        remoteFs: "/home/jenkins/agent"
        removeVolumes: true
  - kubernetes:
      containerCap: 3
      containerCapStr: "3"
      credentialsId: k8s-jenkins-agent-sa
      jenkinsUrl: "https://jenkins.home.devmem.ru"
      name: k8s
      namespace: jenkins
      podRetention: onFailure
      podLabels:
      - key: jenkins
        value: inbound-agent
      - key: app
        value: jenkins-agent-dind
      serverCertificate: |-
        {{ jenkins_k8s_cert | string | indent(width=8) }}
      serverUrl: "https://192.168.13.254:6443"
      webSocket: true
      templates:
      - name: jenkins-agent-dind
        nodeUsageMode: NORMAL
        yamlMergeStrategy: override
        yaml: |-
          apiVersion: v1
          kind: Pod
          spec:
            containers:
            - name: jnlp
              image: ghcr.io/felipecrs/jenkins-agent-dind:latest
              imagePullPolicy: Always
              securityContext:
                privileged: true
                runAsUser: 0
                runAsGroup: 0
              workingDir: /home/jenkins/agent
              volumeMounts:
              - mountPath: /home/jenkins/agent
                name: workspace-volume
              - mountPath: /tmp
                name: tmp
              terminationMessagePolicy: FallbackToLogsOnError
            imagePullSecrets:
            - name: regcred
            hostNetwork: false
            automountServiceAccountToken: false
            enableServiceLinks: false
            dnsPolicy: Default
            restartPolicy: Never
            terminationGracePeriodSeconds: 60
            volumes:
            - name: workspace-volume
              emptyDir: {}
            - name: tmp
              emptyDir: {}
            affinity:
              nodeAffinity:
                preferredDuringSchedulingIgnoredDuringExecution:
                - weight: 1
                  preference:
                    matchExpressions:
                    - key: devmem.ru/pve-host
                      operator: NotIn
                      values:
                      - spsrv
              podAntiAffinity:
                requiredDuringSchedulingIgnoredDuringExecution:
                - labelSelector:
                    matchExpressions:
                    - key: jenkins
                      operator: In
                      values:
                      - inbound-agent
                  topologyKey: kubernetes.io/hostname
unclassified:
  location:
    adminAddress: "{{ inventory__smtp_username }}"
    url: "{{ jenkins_url }}"
  giteaServers:
    servers:
    - displayName: "Gitea"
      manageHooks: false
      serverUrl: "{{ gitea_root_url }}"
  globalLibraries:
    libraries:
    - defaultVersion: "main"
      implicit: true
      includeInChangesets: false
      name: "jenkins-tools"
      retriever:
        modernSCM:
          scm:
            gitea:
              credentialsId: "gitea-user"
              id: "jenkins-tools"
              repoOwner: "projects"
              repository: "jenkins-tools"
              serverUrl: "{{ gitea_root_url }}"
              traits:
              - giteaBranchDiscovery:
                  strategyId: 1
              - giteaPullRequestDiscovery:
                  strategyId: 1
              - giteaForkDiscovery:
                  strategyId: 1
                  trust: "giteaTrustContributors"
  ansiColorBuildWrapper:
    globalColorMapName: "xterm"
  timestamper:
    allPipelines: true
  email-ext:
    adminRequiredForTemplateTesting: false
    allowUnregisteredEnabled: true
    charset: "UTF-8"
    debugMode: false
    defaultBody: "^${JELLY_SCRIPT,template=\"html-with-health-and-console\"}"
    defaultContentType: "text/html"
    defaultRecipients: "jenkins@{{ inventory__site }}"
    defaultSubject: "[ci] $PROJECT_NAME - build #$BUILD_NUMBER - $BUILD_STATUS"
    defaultTriggerIds:
    - "hudson.plugins.emailext.plugins.trigger.AlwaysTrigger"
    - "hudson.plugins.emailext.plugins.trigger.FailureTrigger"
    listId: "<{{ jenkins_host }}>"
    mailAccount:
      credentialsId: "common-smtp-noreply"
      smtpHost: "{{ inventory__smtp_host }}"
      smtpPort: "{{ inventory__smtp_port }}"
      useTls: true
    maxAttachmentSize: 20971520
    maxAttachmentSizeMb: 20
    precedenceBulk: true
    watchingEnabled: false
  openTelemetry:
    authentication: "noAuthentication"
    disabledResourceProviders: "io.opentelemetry.sdk.extension.resources.ProcessResourceProvider"
    endpoint: "http://otel.home.devmem.ru:4317"
    exportOtelConfigurationAsEnvironmentVariables: true
    ignoredSteps: "dir,echo,isUnix,pwd,properties"
    observabilityBackends:
    - customObservabilityBackend:
        name: "SigNoz"
        traceVisualisationUrlTemplate: "https://signoz.k8s.devmem.ru/trace/^${traceId}?spanId=^${spanId}"
    serviceName: "jenkins"
    serviceNamespace: "jenkins"
  pipeline-cache:
    endpoint: "{{ jenkins_s3_endpoint }}"
    region: "{{ jenkins_s3_region }}"
    bucket: "{{ jenkins_s3_bucket }}"
    username: "{{ jenkins_s3_key }}"
    password: "{{ jenkins_s3_secret }}"
    threshold: 1000
credentials:
  system:
    domainCredentials:
    - credentials:
      {% for org in jenkins_gitea_orgs -%}
      - giteaAccessToken:
          description: "{{ org.creds_id }}"
          id: "{{ org.creds_id }}"
          scope: GLOBAL
          token: "{{ org.token }}"
      {% endfor -%}
      - basicSSHUserPrivateKey:
          description: "jenkins-ssh-key"
          id: "jenkins-ssh-key"
          scope: GLOBAL
          username: "root"
          privateKeySource:
            directEntry:
              privateKey: |
                {{ jenkins_ssh_key | string | indent(width=16) }}
      - file:
          description: "jenkins-gpg-key"
          fileName: "jenkins-gpg.key"
          id: "jenkins-gpg-key"
          scope: GLOBAL
          secretBytes: "{{ jenkins_gpg_key | string | b64encode }}"
      - string:
          description: "ansible-homelab-vault-password"
          id: "ansible-homelab-vault-password"
          scope: GLOBAL
          secret: "{{ jenkins_ansible_homelab_vault_password }}"
      - string:
          description: "ansible-vault-password"
          id: "ansible-vault-password"
          scope: GLOBAL
          secret: "{{ jenkins_ansible_vault_password }}"
      {% for key in inventory__sshd_authorized_keys -%}
      - string:
          description: "ssh-pub-key-{{ key.split(' ')[-1] | replace('@', '-') }}"
          id: "ssh-pub-key-{{ key.split(' ')[-1] | replace('@', '-') }}"
          scope: GLOBAL
          secret: "{{ key }}"
      {% endfor -%}
      - usernamePassword:
          description: "gitea-user"
          id: "gitea-user"
          scope: GLOBAL
          username: "{{ jenkins_gitea_user }}"
          password: "{{ jenkins_gitea_user_password }}"
      - usernamePassword:
          description: "terraform-backend"
          id: "terraform-backend"
          scope: GLOBAL
          username: "{{ jenkins_terraform_backend_user }}"
          password: "{{ jenkins_terraform_backend_password }}"
      - usernamePassword:
          description: "proxmox-api-hashi"
          id: "proxmox-api-hashi"
          scope: GLOBAL
          username: "{{ jenkins_proxmox_api_user }}"
          password: "{{ jenkins_proxmox_api_token }}"
      - usernamePassword:
          description: "common-smtp-noreply"
          id: "common-smtp-noreply"
          scope: GLOBAL
          username: "{{ inventory__smtp_username }}"
          password: "{{ inventory__smtp_password }}"
      - string:
          description: "k8s-jenkins-agent-sa"
          id: "k8s-jenkins-agent-sa"
          scope: GLOBAL
          secret: "{{ jenkins_k8s_sa_token }}"
jobs:
# https://jenkinsci.github.io/job-dsl-plugin/#path/organizationFolder
# https://github.com/jenkinsci/configuration-as-code-plugin/blob/master/integrations/src/test/resources/io/jenkins/plugins/casc/SeedJobTest_withGiteaOrganisation.yml
  {% for org in jenkins_gitea_orgs -%}
  - script: >
      organizationFolder("{{ org.name }}") {
        description("{{ org.desc }}")
        organizations {
          gitea {
            serverUrl("{{ gitea_root_url }}")
            repoOwner("{{ org.name }}")
            credentialsId("{{ org.creds_id }}")
            traits {
              giteaExcludeArchivedRepositories {}
              giteaTagDiscovery {}
              giteaBranchDiscovery {
                strategyId(1)
              }
              giteaPullRequestDiscovery {
                strategyId(2)
              }
              giteaForkDiscovery {
                strategyId(1)
                trust {
                  giteaTrustContributors {}
                }
              }
              giteaWebhookRegistration {
                mode("ITEM")
              }
            }
          }
          buildStrategies {
            buildRegularBranches {}
            buildChangeRequests {
              ignoreTargetOnlyChanges(true)
              ignoreUntrustedChanges(false)
            }
            buildTags {
              atLeastDays('-1')
              atMostDays('7')
            }
          }
        }
        configure { node ->
          node / "properties" / "ru.omniverse.jenkins.skip__cron__rebuild.SkipCronRebuild" {
            skipTagRebuild(true)
          }
        }
        configure { node ->
          node / buildStrategies / "jenkins.branch.buildstrategies.basic.SkipInitialBuildOnFirstBranchIndexing" {}
        }
        configure { node ->
          node / triggers / "com.cloudbees.hudson.plugins.folder.computed.PeriodicFolderTrigger" {
            spec("H H/4 * * *")
            interval(86400000)
          }
        }
      }
  {% endfor -%}
