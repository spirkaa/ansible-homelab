---
- name: vault - start
  community.docker.docker_container:
    name: vault
    image: "{{ vault_image }}"
    pull: true
    env:
      VAULT_ADDR: "{{ vault_api_addr }}"
      VAULT_API_ADDR: "{{ vault_api_addr }}"
      VAULT_LOCAL_CONFIG: "{{ vault_local_config | to_json }}"
    volumes:
      - "{{ app_path }}/vault/file:/vault/file"
      - "{{ app_path }}/vault/logs:/vault/logs"
    networks:
      - name: "{{ app_network_name }}"
    networks_cli_compatible: true
    labels:
      traefik.enable: "true"
      traefik.http.routers.vault.rule: "HostRegexp(`vault(.{{ inventory__homelab_domain }})?`)"
      traefik.http.services.vault.loadbalancer.server.port: "8200"
      traefik.http.routers.vault.entrypoints: "websecure"
      traefik.http.routers.vault.tls: "true"
    capabilities:
      - ipc_lock
    command: server
    restart_policy: unless-stopped
    state: started
  tags: vault

- name: vault - status
  ansible.builtin.command: >
    docker exec vault sh -c 'vault status -format=json'
  register: _vault_status
  until: '"initialized" in _vault_status.stdout'
  retries: 10
  delay: 2
  failed_when: _vault_status.rc == 1 and "connection refused" not in _vault_status.stderr
  changed_when: false
  tags: vault

- name: vault - status - set_fact
  ansible.builtin.set_fact:
    vault_status: "{{ _vault_status.stdout | from_json }}"
  tags: vault

- name: vault - init
  when: not vault_status.initialized
  block:
    - name: vault - init
      ansible.builtin.command: >
        docker exec vault sh -c 'vault operator init -key-shares 1 -key-threshold 1 -format=json'
      register: _vault_init_result
      changed_when: true
      no_log: true
      tags: vault

    - name: vault - init - set_fact
      ansible.builtin.set_fact:
        vault_unseal_key: "{{ _vault_init_result.stdout | from_json | json_query('unseal_keys_b64[0]') }}"
        vault_token: "{{ _vault_init_result.stdout | from_json | json_query('root_token') }}"
      no_log: true
      tags: vault

    - name: vault - init - print creds
      ansible.builtin.debug:
        msg: "export VAULT_UNSEAL_KEY={{ vault_unseal_key }}; export VAULT_TOKEN={{ vault_token }}"
      tags: vault

- name: vault - unseal key
  no_log: true
  when:
    - vault_status.initialized
    - vault_status.sealed
    - not vault_unseal_key | length
  block:
    - name: vault - unseal - prompt for key
      ansible.builtin.pause:
        prompt: "Enter Unseal Key"
      register: prompt
      failed_when: prompt.user_input | length == 0
      changed_when: false
      tags: vault

    - name: Set  - unseal - set_fact
      ansible.builtin.set_fact:
        vault_unseal_key: "{{ prompt.user_input }}"
      tags: vault

- name: vault - unseal
  ansible.builtin.command: >
    docker exec vault sh -c 'vault operator unseal -format=json {{ vault_unseal_key }}'
  register: _vault_unseal_result
  no_log: true
  changed_when: true
  when: vault_status.sealed
  tags: vault

- name: vault - configure
  no_log: true
  when: vault_token | length
  block:
    - name: vault - audit enable
      ansible.builtin.command: >
        {{ vault_docker_exec }} 'vault audit enable file file_path=/vault/logs/audit.log'
      register: _vault_audit_enable_result
      failed_when: _vault_audit_enable_result.rc == 2 and "already in use" not in _vault_audit_enable_result.stderr
      changed_when: '"Success!" in _vault_audit_enable_result.stdout'
      tags: vault

    - name: vault - auth enable
      ansible.builtin.command: >
        {{ vault_docker_exec }} 'vault auth enable {{ item }}'
      loop: "{{ vault_auth_methods }}"
      register: _vault_auth_enable_result
      failed_when: _vault_auth_enable_result.rc == 2 and "already in use" not in _vault_auth_enable_result.stderr
      changed_when: '"Success!" in _vault_auth_enable_result.stdout'
      tags: vault

    - name: vault - secrets enable
      ansible.builtin.command: >
        {{ vault_docker_exec }} 'vault secrets enable -path={{ item.path | default(item.name) }} {{ item.name }}'
      loop: "{{ vault_secrets_engines }}"
      register: _vault_secrets_enable_result
      failed_when: _vault_secrets_enable_result.rc == 2 and "already in use" not in _vault_secrets_enable_result.stderr
      changed_when: '"Success!" in _vault_secrets_enable_result.stdout'
      tags: vault

    - name: vault - write ldap config
      ansible.builtin.command: >
        {{ vault_docker_exec }} 'vault write auth/ldap/config {{ vault_ldap_config }}'
      changed_when: true
      tags: vault

    - name: vault - write policies
      ansible.builtin.command: |
        {{ vault_docker_exec }} 'vault policy write {{ item.name }} - << EOF
        {{ item.policy }}
        EOF'
      changed_when: true
      loop: "{{ vault_policies }}"
      tags: vault

    - name: vault - apply policies to ldap groups
      ansible.builtin.command: >
        {{ vault_docker_exec }} 'vault write auth/ldap/groups/{{ item.group }} policies={{ item.name }}'
      changed_when: true
      loop: "{{ vault_policies }}"
      tags: vault

    - name: vault - ansible approle - create
      ansible.builtin.command: >
        {{ vault_docker_exec }} 'vault write auth/approle/role/ansible \
        token_policies="ansible" \
        token_ttl=1h \
        token_max_ttl=4h'
      changed_when: true
      tags: vault

    - name: vault - ansible approle - get role-id
      ansible.builtin.command: >
        {{ vault_docker_exec }} 'vault read -field=role_id auth/approle/role/ansible/role-id'
      register: _vault_role_id_result
      changed_when: false
      tags: vault

    - name: vault - ansible approle - get secret-id
      ansible.builtin.command: >
        {{ vault_docker_exec }} 'vault write -f -field=secret_id auth/approle/role/ansible/secret-id'
      register: _vault_secret_id_result
      changed_when: false
      tags: vault

    - name: vault - ansible approle - print creds
      ansible.builtin.debug:
        msg: "export VAULT_ROLE_ID={{ _vault_role_id_result.stdout }}; export VAULT_SECRET_ID={{ _vault_secret_id_result.stdout }}"
      no_log: false
      tags: vault

- name: vault - configure freeipa
  ansible.builtin.include_tasks: freeipa_service_bind.yml
  vars:
    freeipa_service_bind_sysaccount_dn: "{{ vault_ldap_bind_dn }}"
    freeipa_service_bind_sysaccount_pass: "{{ vault_ldap_bind_pw }}"
    freeipa_service_bind_group_name: "{{ item }}"
  args:
    apply:
      tags: vault
  loop:
    - "{{ vault_ldap_access_group }}"
    - "{{ vault_ldap_admins }}"
    - "{{ vault_ldap_rw_users }}"
    - "{{ vault_ldap_ro_users }}"
  tags: vault
