---
- name: phpldapadmin - start
  community.docker.docker_container:
    name: phpldapadmin
    image: "{{ phpldapadmin_image }}"
    image_name_mismatch: recreate
    pull: true
    env:
      PHPLDAPADMIN_LDAP_HOSTS: "#PYTHON2BASH:[{'{{ inventory__ldap_domain }}': [{'server': [{'tls': 'true'},{'hide_noaccess_base': 'true'}]}, {'login': [{'bind_id': '{{ phpldapadmin_bind_id }}'},{'timeout': '60'}]}, {'appearance': [{'open_tree': 'true'}]}]}]"
      PHPLDAPADMIN_LDAP_CLIENT_TLS_REQCERT: "allow"
      PHPLDAPADMIN_HTTPS: "false"
      PHPLDAPADMIN_TRUST_PROXY_SSL: "true"
    volumes:
      - "phpldapadmin-var-www:/var/www/phpldapadmin"
    networks:
      - name: "{{ app_network_name }}"
    networks_cli_compatible: true
    labels:
      traefik.enable: "true"
      traefik.http.routers.phpldapadmin.rule: "HostRegexp(`ldap(.{{ app_base_domain }})?`)"
      traefik.http.routers.phpldapadmin.entrypoints: "websecure"
      traefik.http.routers.phpldapadmin.tls: "true"
    restart_policy: unless-stopped
    state: started
  no_log: true
  tags: freeipa

- name: freeipa - delete old ipaupgrade.log
  ansible.builtin.file:
    path: "{{ freeipa_data_host_path }}/var/log/ipaupgrade.log"
    state: absent
  tags: freeipa

- name: freeipa - start
  community.docker.docker_container:
    name: freeipa
    image: "{{ freeipa_image }}"
    image_name_mismatch: recreate
    pull: true
    hostname: "{{ inventory__ldap_domain }}"
    ports:
      - "389:389"  # ldap
      - "636:636"  # ldaps
      - "88:88"  # kerberos
      - "88:88/udp"  # kerberos
      - "464:464"  # kpasswd
      - "464:464/udp"  # kpasswd
      - "123:123/udp"  # ntp
      - "53:53"  # dns
      - "53:53/udp"  # dns
    volumes:
      - "/sys/fs/cgroup:/sys/fs/cgroup:ro"
      - "{{ freeipa_data_host_path }}:/data"
    tmpfs:
      - "/run"
      - "/tmp"
    sysctls:
      net.ipv6.conf.all.disable_ipv6: 0
    security_opts:
      - seccomp=unconfined
    command: >
      --unattended
      --realm={{ app_base_domain | upper }}
      --domain={{ app_base_domain }}
      --ds-password={{ freeipa_ds_password }}
      --admin-password={{ freeipa_admin_password }}
    networks:
      - name: "{{ app_network_name }}"
    networks_cli_compatible: true
    labels:
      traefik.enable: "true"
      traefik.http.routers.freeipa.rule: "HostRegexp(`ipa(.{{ app_base_domain }})?`)"
      traefik.http.routers.freeipa.entrypoints: "websecure"
      traefik.http.routers.freeipa.tls: "true"
      traefik.http.services.freeipa.loadbalancer.server.port: "443"
      traefik.http.services.freeipa.loadbalancer.server.scheme: "https"
    restart_policy: unless-stopped
    state: started
  register: freeipa_start
  no_log: true
  tags: freeipa

- name: freeipa - wait
  when: freeipa_start.changed
  ignore_errors: true  # noqa: ignore-errors
  block:
    - name: freeipa - wait for install to finish
      ansible.builtin.wait_for:
        path: "{{ freeipa_data_host_path }}/var/log/ipaserver-install.log"
        search_regex: "The ipa-server-install command was successful"
        timeout: 1200
      tags: freeipa

    - name: freeipa - wait for ipaupgrade.log
      ansible.builtin.wait_for:
        path: "{{ freeipa_data_host_path }}/var/log/ipaupgrade.log"
        state: present
        timeout: 30
      tags: freeipa

    - name: freeipa - wait for upgrade to finish
      ansible.builtin.wait_for:
        path: "{{ freeipa_data_host_path }}/var/log/ipaupgrade.log"
        search_regex: "The ipa-server-upgrade command was successful"
        timeout: 120
      tags: freeipa

- name: freeipa - customize - copy custom schema
  vars:
    realm: "{{ app_base_domain | replace('.', '-') | upper }}"  # int.domain.com -> INT-DOMAIN-COM
  ansible.builtin.copy:
    src: files/98postfix-book.ldif
    dest: "{{ freeipa_data_host_path }}/etc/dirsrv/slapd-{{ realm }}/schema"
    owner: "389"
    group: "389"
    mode: "0644"
  notify: freeipa - restart
  tags: freeipa

- name: freeipa - flush_handlers
  ansible.builtin.meta: flush_handlers
  tags: freeipa

- name: freeipa - wait for ipa webui become available
  ansible.builtin.uri:
    url: https://{{ inventory__ldap_domain }}/ipa/ui/
    status_code: 200
  register: result
  until: result.status == 200
  retries: 60
  delay: 1
  tags: freeipa

- name: freeipa - customize - check if permisssion already exists
  ansible.builtin.command: >
    docker exec freeipa sh -c 'kdestroy 2> /dev/null;
    echo "{{ freeipa_admin_password }}" | kinit admin > /dev/null;
    ipa permission-show "Read Postfix Book Attributes"'
  register: permission_show
  until: permission_show.rc == 0
  retries: 5
  delay: 5
  failed_when: permission_show.rc >= 1 and "permission not found" not in permission_show.stderr
  changed_when: false
  no_log: true
  tags: freeipa

- name: freeipa - customize - permisssion for custom schema attrs
  ansible.builtin.command: >
    docker exec freeipa sh -c 'kdestroy 2> /dev/null;
    echo "{{ freeipa_admin_password }}" | kinit admin > /dev/null;
    ipa permission-add "Read Postfix Book Attributes"
    --right=read --right=search --right=compare
    --bindtype=all
    --type=user
    --attrs={mailHomeDirectory,mailAlias,mailUidNumber,mailGidNumber,mailEnabled,mailGroupMember,mailQuotaBytes,mailStorageDirectory,mailSieveRuleSource,mailForwardingAddr}'
  register: permission_add
  changed_when: '"Added permission" in permission_add.stdout'
  when: '"Read Postfix Book Attributes" not in permission_show.stdout'
  no_log: true
  tags: freeipa

- name: freeipa - customize - check if default user object classes already modified
  ansible.builtin.command: >
    docker exec freeipa sh -c 'kdestroy 2> /dev/null;
    echo "{{ freeipa_admin_password }}" | kinit admin > /dev/null;
    ipa config-show --all'
  register: config_show
  changed_when: false
  no_log: true
  tags: freeipa

- name: freeipa - customize - default user object classes
  ansible.builtin.command: >
    docker exec freeipa sh -c 'kdestroy 2> /dev/null;
    echo "{{ freeipa_admin_password }}" | kinit admin > /dev/null;
    ipa config-mod
    --userobjectclasses={top,person,organizationalperson,inetorgperson,inetuser,posixaccount,krbprincipalaux,krbticketpolicyaux,ipaobject,ipasshuser,PostfixBookMailAccount}'
  register: userobjectclasses_mod
  failed_when: >
    userobjectclasses_mod.rc >= 1 and
    "no modifications to be performed" not in userobjectclasses_mod.stderr
  changed_when: '"PostfixBookMailAccount" in userobjectclasses_mod.stdout'
  when: '"PostfixBookMailAccount" not in config_show.stdout'
  no_log: true
  tags: freeipa

- name: freeipa - customize - password global policy
  vars:
    change_check_str: "Max lifetime (days): {{ freeipa_password_policy_maxlife }}"
  ansible.builtin.command: >
    docker exec freeipa sh -c 'kdestroy 2> /dev/null;
    echo "{{ freeipa_admin_password }}" | kinit admin > /dev/null;
    ipa pwpolicy-mod global_policy
    --maxlife={{ freeipa_password_policy_maxlife }}'
  register: pwpolicy_mod
  failed_when: >
    pwpolicy_mod.rc >= 1 and
    "no modifications to be performed" not in pwpolicy_mod.stderr
  changed_when: change_check_str in pwpolicy_mod.stdout
  no_log: true
  tags: freeipa

- name: freeipa - customize - default mail domain
  community.general.ipa_config:
    ipadefaultemaildomain: "{{ freeipa_mail_domain }}"
    ipa_host: "{{ inventory__ldap_domain }}"
    ipa_pass: "{{ freeipa_admin_password }}"
  tags: freeipa
