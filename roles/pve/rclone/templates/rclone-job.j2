#!/bin/bash

##############################################################################
# An rclone backup script by Jared Males (jaredmales@gmail.com)
#
# Copyright (C) 2018 Jared Males <jaredmales@gmail.com>
#
# This script is licensed under the terms of the MIT license.
# https://opensource.org/licenses/MIT
#
# Runs the 'rclone sync' command. Designed to be used as a cron job.
#
# 1) Backup Source
#    Edit the SRC variable below to point to the directory you want to backup.
#
# 2) Backup Destination
#    Edit the DEST variable to point to the remote and location (see rclone docs).
#
# 3) Excluding files and directories
#    Edit the EXCLUDEFILE variable below to point to a file listing files and directories to exclude.
#    See the rclone docs for the format.
#
#    Also, any directory can be excluded by adding an '.rclone-ignore' file to it without editing the exclude file.
#    This file can be empty. You can edit the name of this file with EXIFPRESENT below.
#
# 4) You can change the bandwidth limits by editing BWLIMT, which includes a timetable facility.
#    See rclone docs for more info.
#
# 5) Logs:
#    -- The output of rclone is written to the location specified by LOGFILE. This is rotated with savelog.
#       The details of synclog can be edited.
#    -- The log rotation, and start and stop times of this script, are written to the location specified by CRONLOG.
#       This isn't yet rotated, probably should be based on size.
#
##############################################################################

FILENAME=$(basename "$0")

###################################################
## Locking Boilerplate from https://gist.github.com/przemoc/571091
## Included under MIT License:
###################################################

## Copyright (C) 2009 Przemyslaw Pawelczyk <przemoc@gmail.com>
##
## This script is licensed under the terms of the MIT license.
## https://opensource.org/licenses/MIT
#
# Lockable script boilerplate

LOCKFILE="/tmp/$FILENAME"
LOCKFD=99

# PRIVATE
_lock() { flock -$1 $LOCKFD; }
_no_more_locking() {
  _lock u
  _lock xn && rm -f $LOCKFILE
}
_prepare_locking() {
  eval "exec $LOCKFD>\"$LOCKFILE\""
  trap _no_more_locking EXIT
}

# ON START
_prepare_locking

# PUBLIC
exlock_now() { _lock xn; } # obtain an exclusive lock immediately or fail
exlock() { _lock x; }      # obtain an exclusive lock
shlock() { _lock s; }      # obtain a shared lock
unlock() { _lock u; }      # drop a lock

###################################################
# End of locking code from Pawelczyk
###################################################

# location of job log
LOGFILE="/var/log/$FILENAME.log"

# lLocation of cron log
CRONLOG=/var/log/rclone-jobs.log

# create log entry
logger() {
  echo $(date -u)" | $FILENAME | $@" >>$CRONLOG
}

# make a log entry if we exit because locked
exit_on_lock() {
  logger "already running"
  exit 1
}

logger "started"

# obtain lock
exlock_now || exit_on_lock

# rotate logs
savelog -n -c 7 $LOGFILE >/dev/null 2>&1 && logger "rotated $LOGFILE"

# run rclone
SRC={{ item.src }}
DEST={{ item.dest }}
EXCLUDE='{{ item.exclude | default('', true) }}'
LOG_ARGS='-v --log-file='$LOGFILE
MINAGE=15m
TRANSFERS=32
CHECKERS=32

{% if item.type == "sync" %}
rclone sync $SRC $DEST \
  $LOG_ARGS \
  --transfers $TRANSFERS \
  --checkers $CHECKERS \
  --min-age $MINAGE \
  --delete-excluded $EXCLUDE \
  --drive-stop-on-upload-limit
{% elif item.type == "rcat" %}
tar -I "pzstd -p 4" -cf - $EXCLUDE --directory=$SRC . |
  rclone rcat $DEST \
    $LOG_ARGS \
    --transfers $TRANSFERS \
    --checkers $CHECKERS \
    --drive-stop-on-upload-limit
{% endif %}
{{ item.post_cmd | default('', true) }}

logger "finished"

# release lock
unlock
